name: CI

on:
  push:
    branches: ["feature/github-actions"]
  pull_request:
    branches: ["feature/github-actions"]
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:

  verify-gitignore:
    name: Verify .gitignore (guard rails)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Ensure .gitignore exists and has critical entries
        run: |
          test -f .gitignore || (echo ".gitignore missing" && exit 1)
          MUST_HAVE=(
            ".env"
            "node_modules/"
            "dist/"
            "build/"
            "coverage/"
            ".vscode/"
            ".idea/"
          )
          for p in "${MUST_HAVE[@]}"; do
            if ! grep -qE "^${p//\//\\/}(\$|)" .gitignore; then
              echo "Missing .gitignore pattern: $p"; FAIL=1
            fi
          done
          test -z "$FAIL" || exit 1

  lint-and-unit-backend:
    name: Backend lint & unit (if present)
    runs-on: ubuntu-latest
    needs: verify-gitignore
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      - name: Install
        working-directory: backend
        run: npm ci
      - name: Lint (if present)
        working-directory: backend
        run: npm run lint --if-present
      - name: Test (skip if placeholder)
        working-directory: backend
        run: |
          TEST_SCRIPT=$(node -p "require('./package.json').scripts?.test || ''")
          if [ -n "$TEST_SCRIPT" ] && ! echo "$TEST_SCRIPT" | grep -qi "no test specified"; then
            npm test -- --ci --reporters=default --reporters=jest-junit
          else
            echo "Skipping backend tests: no real test script defined."
          fi

  compose-smoke-backend:
    name: Docker Compose smoke (backend only)
    runs-on: ubuntu-latest
    needs: verify-gitignore
    steps:
      - uses: actions/checkout@v4
      - name: Prepare env
        run: cp .env.example .env
      - name: Build & up (backend + cache)
        working-directory: docker
        run: |
          docker compose build cache backend
          docker compose up -d cache backend
          echo "Waiting services..."
          sleep 10
      - name: Smoke /health and /status
        working-directory: docker
        run: bash ./test/smoke.sh
      - name: Logs on failure
        if: failure()
        working-directory: docker
        run: docker compose logs --no-color > compose.log
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: compose-logs
          path: docker/compose.log
      - name: Down
        if: always()
        working-directory: docker
        run: docker compose down -v

  security-gitleaks:
    name: Secrets scan (gitleaks)
    runs-on: ubuntu-latest
    needs: [verify-gitignore]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --redact --verbose
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-trivy-fs:
    name: Trivy FS (repo deps)
    runs-on: ubuntu-latest
    needs: [verify-gitignore]
    steps:
      - uses: actions/checkout@v4
      - name: Trivy filesystem (HIGH/CRITICAL fail)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: 'os,library'
          format: 'table'
          exit-code: '1'

  security-trivy-image:
    name: Trivy Image (backend)
    runs-on: ubuntu-latest
    needs: [compose-smoke-backend]
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image (tag for scan)
        run: docker build -t nimbus25-backend:ci ./backend
      - name: Scan backend image (HIGH/CRITICAL fail)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'nimbus25-backend:ci'
          severity: 'HIGH,CRITICAL'
          ignore-unfixed: true
          vuln-type: 'os,library'
          format: 'table'
          exit-code: '1'